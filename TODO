TODO
---------------------------
this iteration:
	- Proper mode support (struct cmode/umode)
	- bug, nick 'aaa' shortened to +a with prefix
	 22:04  -- ~ Topic set by blah
     22:52   > ~ foo has joined ##channel
     00:11  +a ~ hi

next iteration:
	- segfault on reconnect/rejoin?
	- hook up new server/channel/mode/etc implementations

next next iteration:
	- TODO/FIXME cleanups

Continue refactoring:
	- Move/split components (e.g. server, channel, input, etc):
		src/components/*.{c,h}, src/README.md
	- Untangle headers
	- Rewrite input DLL as circular buffer of gap buffers, with copy on repeat,
		use abstractions in _draw_input
	- Split net/server code
	- Error/warning writing from stateless components, e.g.:
		- mode.c should be able to call err("...") on some passed parameter
		  and have it written to the appropriate buffer with the appropriate
		  `from`, etc
		- this should be easily overridden in testing to assert the right error
		  messages are being reported (fix current mock newline/newlinef)
		- this code might live in state.c, should be callable from anywher (e.g. mesg.c)
		- review stateless components and add any extra errors/warnings that could
		  be added
	- more debug information, levels, for various events, a debug pannel as a new channel
	  type when debug flag is set

RFC compliance:
	- List required message types and associated error messages
	- List all message types and error numerics from RFC, mark handled/unhandled

Testing:
	- Stateful code integration testing
	- Coverage (gcov)
		- link test/foo.c against src/foo.o built with coverage flags
	- Fuzzing handlers (afl)
	- Try musl C

TLS/SASL

----------------------
	/NICKS, /IGNORE, /UNIGNORE,
		print the current nicks, ignore list, to the channel
		^(Also print this implicitly when end of nicks numeric is received)
		^(Print as buffer_line type dynamically to fill available terminal space)

	Numerics:
	221 +<flags> :(null)
		 returned when MODE <current nick> is sent

	351 reply from server for /version
		 on freenode it sends me 005...

	409 :No origin specified, (eg "/raw PING")

	421 <command> :Unknown command

	435 cannot change nickname while banned
		(eg unregistered in channel and trying to /nick)

	441 <user> <channel> :They're not on that channel
		(eg kick a user not in the channel)

	442 <channel> :You're not on that channel

	451 :Connection not registered
		(eg sending a join before registering)

	461 <CMD>   :Syntax error  ... from "/nick" or "/join"

	470 <chan1> <chan2> :forwarding to another channel

	482 <channel> :You're not the channel operator

	501:Unknown mode "<flag>"

	502 :Can't set/get mode for other users
		 (e.g.: /raw MODE <not my nick> <flag>
----------------------
valgrind reports addrinfo memory lost when cancelling hung connection

show connect eta intead of ping when reconnecting

show disconnected/parted in status bar for channels instead of 0 user count

Keep state of tab complete for successively getting the next nick lexicographically

Make sure all the thread related code is using thread-safe functions,
and that proper cancellation points are used. Make sure no resources
can be left hanging (eg: sockets left open when a thread is canceled?)

Implement generic command arguments
	/<cmd> -arg
e.g.
	/topic -unset

FIXME:
---------------------------
Empty trailing should be null, e.g.:
":nick!~user@host PART #channel :" -> "< ~ nick!~user@host has left #channel ()"

when disconnected and reconnected, PING/PONG seems to be out of sync?
	client continuously goes into timing out, though connection is still established

I broke the activity colouring stuff:
	join/part/quit sets activity (it shouldnt)
	message and ping dont set activity (they should)

Some servers place single args in the trailing section, eg: JOIN :channel vs JOIN channel
which forces the handlers to check p->params and p->trailing, however since p->params
is set to NULL in this case, the result is strtok(NULL, " "), so strtok attemps to continue
parsing whatever it last parsed. Instead, a function like strsep should be implemented
which correctly handles NULL input in this case
	-> replace stringtok/stringtok_r with getarg

If in ##channel that requires authentication (ie bumps you to ##channel-unauthorized
or similar), /disconnect, /connect, rirc attempts to join ##channel, can't, and is
bumped to ##channel-unauthorized, but ##channel buffer remains open and not flagged
as parted, ie could potentially send messages to the channel, but won't receive any
	- or it returns 403, and cant /join the channel because it's not parted

use the alternate screen buffer to restore screen when rirc exits

##linux ~ cannot send to channel
-- cannot send to '##linux - cannot send to channel'
:::and on each message
	ERR_ERRONEUSNICKNAME: nick is null
