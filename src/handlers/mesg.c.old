#include <ctype.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>

#include "src/draw.h"
#include "src/io.h"
#include "src/state.h"
#include "src/utils/utils.h"

#include "src/handlers/irc_recv.gperf.out"
#include "src/handlers/irc_send.gperf.out"

/* Fail macros used in message sending/receiving handlers */
#define fail(C, M) \
	do { newline((C), 0, "-!!-", (M)); return 0; } while (0)

/* Fail with formatted message */
#define failf(C, M, ...) \
	do { newlinef((C), 0, "-!!-", (M), __VA_ARGS__); return 0; } while (0)

#define IS_ME(X) !strcmp((X), s->nick)

/* Special case handler for numeric replies */
static int recv_numeric(struct parsed_mesg*, struct server*);

/* Numeric Reply Codes */
enum numeric {
	RPL_WELCOME          =   1,
	RPL_YOURHOST         =   2,
	RPL_CREATED          =   3,
	RPL_MYINFO           =   4,
	RPL_ISUPPORT         =   5,
	RPL_STATSCONN        = 250,
	RPL_LUSERCLIENT      = 251,
	RPL_LUSEROP          = 252,
	RPL_LUSERUNKNOWN     = 253,
	RPL_LUSERCHANNELS    = 254,
	RPL_LUSERME          = 255,
	RPL_LOCALUSERS       = 265,
	RPL_GLOBALUSERS      = 266,
	RPL_CHANNEL_URL      = 328,
	RPL_NOTOPIC          = 331,
	RPL_TOPIC            = 332,
	RPL_TOPICWHOTIME     = 333,
	RPL_NAMEREPLY        = 353,
	RPL_ENDOFNAMES       = 366,
	RPL_MOTD             = 372,
	RPL_MOTDSTART        = 375,
	RPL_ENDOFMOTD        = 376,
	ERR_NOSUCHNICK       = 401,
	ERR_NOSUCHSERVER     = 402,
	ERR_NOSUCHCHANNEL    = 403,
	ERR_CANNOTSENDTOCHAN = 404,
	ERR_ERRONEUSNICKNAME = 432,
	ERR_NICKNAMEINUSE    = 433,
	ERR_INVITEONLYCHAN   = 473,
	ERR_NOCHANMODES      = 477
};

void
recv_mesg(struct server *s, struct parsed_mesg *p)
{
	const struct recv_handler* handler;

	if (isdigit(*p->command))
		recv_numeric(p, s);
	else if ((handler = recv_handler_lookup(p->command, strlen(p->command))))
		handler->func(p, s);
	else
		newlinef(s->channel, 0, "-!!-", "Message type '%s' unknown", p->command);
}

static int
recv_numeric(struct parsed_mesg *p, struct server *s)
{
	/* :server <code> <target> [args] */

	char *targ, *nick, *chan, *time, *type, *num;
	int ret, _code;

	struct channel *c;

	/* Extract numeric code */
	for (_code = 0; isdigit(*p->command); p->command++) {

		_code = _code * 10 + (*p->command - '0');

		if (_code > 999)
			fail(s->channel, "NUMERIC: greater than 999");
	}

	enum numeric code = _code;

	/* Message target is only used to establish s->nick when registering with a server */
	if (!(targ = getarg(&p->params, " "))) {
		io_dx(s->connection);
		fail(s->channel, "NUMERIC: target is null");
		return 1;
	}

	/* Message target should match s->nick or '*' if unregistered, otherwise out of sync */
	if (strcmp(targ, s->nick) && strcmp(targ, "*") && code != RPL_WELCOME) {
		io_dx(s->connection);
		failf(s->channel, "NUMERIC: target mismatched, nick is '%s', received '%s'", s->nick, targ);
	}

	switch (code) {

	/* 001 :<Welcome message> */
	case RPL_WELCOME:

		/* Establishing new connection with a server,
		 * handle any channel auto-join or rejoins */

		c = s->channel;

		/* join any non-parted channels */
		do {
			//TODO: channel_list_foreach
			if (c->type == CHANNEL_T_CHANNEL && !c->parted) {
				if ((ret = io_sendf(s->connection, "JOIN %s", c->name)))
					failf(s->channel, "sendf fail: %s", io_err(ret));
			}
			c = c->next;
		} while (c != s->channel);

		if (p->trailing)
			newline(s->channel, 0, "--", p->trailing);

		newlinef(s->channel, 0, "--", "You are known as %s", s->nick);
		break;


	case RPL_YOURHOST:  /* 002 :<Host info, server version, etc> */
	case RPL_CREATED:   /* 003 :<Server creation date message> */

		/* FIXME: trailing can be null, here and elsewhere, eg `:d 003 nick VG` */
		newline(s->channel, 0, "--", p->trailing);
		break;


	case RPL_MYINFO:    /* 004 <params> :Are supported by this server */

		newlinef(s->channel, 0, "--", "%s ~ supported by this server", p->params);

		server_set_004(s, p->params);
		break;

	case RPL_ISUPPORT:  /* 005 <params> :Are supported by this server */

		newlinef(s->channel, 0, "--", "%s ~ supported by this server", p->params);

		server_set_005(s, p->params);
		break;


	/* 328 <channel> :<url> */
	case RPL_CHANNEL_URL:

		if (!(chan = getarg(&p->params, " ")))
			fail(s->channel, "RPL_CHANNEL_URL: channel is null");

		if ((c = channel_list_get(&s->clist, chan)) == NULL)
			failf(s->channel, "RPL_CHANNEL_URL: channel '%s' not found", chan);

		newlinef(c, 0, "--", "URL for %s is: \"%s\"", chan, p->trailing);
		break;


	/* 332 <channel> :<topic> */
	case RPL_TOPIC:

		if (!(chan = getarg(&p->params, " ")))
			fail(s->channel, "RPL_TOPIC: channel is null");

		if ((c = channel_list_get(&s->clist, chan)) == NULL)
			failf(s->channel, "RPL_TOPIC: channel '%s' not found", chan);

		newlinef(c, 0, "--", "Topic for %s is \"%s\"", chan, p->trailing);
		break;


	/* 333 <channel> <nick> <time> */
	case RPL_TOPICWHOTIME:

		if (!(chan = getarg(&p->params, " ")))
			fail(s->channel, "RPL_TOPICWHOTIME: channel is null");

		if (!(nick = getarg(&p->params, " ")))
			fail(s->channel, "RPL_TOPICWHOTIME: nick is null");

		if (!(time = getarg(&p->params, " ")))
			fail(s->channel, "RPL_TOPICWHOTIME: time is null");

		if ((c = channel_list_get(&s->clist, chan)) == NULL)
			failf(s->channel, "RPL_TOPICWHOTIME: channel '%s' not found", chan);

		time_t raw_time = atoi(time);
		time = ctime(&raw_time);

		newlinef(c, 0, "--", "Topic set by %s, %s", nick, time);
		break;


	// FIXME: this is returned from /names <target>
	// ... /names returns all names on all channels
	// flag channel namereply :1
	//
	// differentiate reply after JOIN or NAMES?
	/* 353 ("="/"*"/"@") <channel> :*([ "@" / "+" ]<nick>) */
	case RPL_NAMEREPLY:

		/* @:secret   *:private   =:public */
		if (!(type = getarg(&p->params, " ")))
			fail(s->channel, "RPL_NAMEREPLY: type is null");

		if (!(chan = getarg(&p->params, " ")))
			fail(s->channel, "RPL_NAMEREPLY: channel is null");

		if ((c = channel_list_get(&s->clist, chan)) == NULL)
			failf(s->channel, "RPL_NAMEREPLY: channel '%s' not found", chan);

		if ((ret = mode_chanmode_prefix(&(c->chanmodes), &(s->mode_cfg), *type)))
			newlinef(c, 0, "-!!-", "RPL_NAMEREPLY: invalid channel flag: '%c'", *type);

		while ((nick = getarg(&p->trailing, " "))) {

			char prefix = 0;

			struct mode m = MODE_EMPTY;

			/* Set user prefix */
			if (!irc_isnickchar(*nick, 1))
				prefix = *nick++;

			if (prefix && mode_prfxmode_prefix(&m, &(s->mode_cfg), prefix) != MODE_ERR_NONE)
				newlinef(c, 0, "-!!-", "Invalid user prefix: '%c'", prefix);

			if (user_list_add(&(c->users), nick, m) == USER_ERR_DUPLICATE)
				newlinef(c, 0, "-!!-", "Duplicate nick: '%s'", nick);
		}

		draw_status();
		break;


	case RPL_STATSCONN:    /* 250 :<Message> */
	case RPL_LUSERCLIENT:  /* 251 :<Message> */

		newline(s->channel, 0, "--", p->trailing);
		break;


	case RPL_LUSEROP:        /* 252 <int> :IRC Operators online */
	case RPL_LUSERUNKNOWN:   /* 253 <int> :Unknown connections */
	case RPL_LUSERCHANNELS:  /* 254 <int> :Channels formed */

		if (!(num = getarg(&p->params, " ")))
			num = "NULL";

		newlinef(s->channel, 0, "--", "%s %s", num, p->trailing);
		break;


	case RPL_LUSERME:      /* 255 :I have <int> clients and <int> servers */
	case RPL_LOCALUSERS:   /* 265 <int> <int> :Local users <int>, max <int> */
	case RPL_GLOBALUSERS:  /* 266 <int> <int> :Global users <int>, max <int> */
	case RPL_MOTD:         /* 372 :- <text> */
	case RPL_MOTDSTART:    /* 375 :- <server> Message of the day - */

		newline(s->channel, 0, "--", p->trailing);
		break;


	/* Not printing these */
	case RPL_NOTOPIC:     /* 331 <chan> :<Message> */
	case RPL_ENDOFNAMES:  /* 366 <chan> :<Message> */
	case RPL_ENDOFMOTD:   /* 376 :End of MOTD command */
		break;


	case ERR_NOSUCHNICK:    /* <nick> :<reason> */
	case ERR_NOSUCHSERVER:  /* <server> :<reason> */
	case ERR_NOSUCHCHANNEL: /* <channel> :<reason> */

		if (!(targ = getarg(&p->params, " "))) {
			if (code == ERR_NOSUCHNICK)
				fail(s->channel, "ERR_NOSUCHNICK: nick is null");
			if (code == ERR_NOSUCHSERVER)
				fail(s->channel, "ERR_NOSUCHSERVER: server is null");
			if (code == ERR_NOSUCHCHANNEL)
				fail(s->channel, "ERR_NOSUCHCHANNEL: channel is null");
		}

		/* Private buffer might not exist */
		if ((c = channel_list_get(&s->clist, targ)) == NULL)
			c = s->channel;

		if (p->trailing)
			newlinef(c, 0, "--", "Cannot send to '%s': %s", targ, p->trailing);
		else
			newlinef(c, 0, "--", "Cannot send to '%s'", targ);
		break;


	case ERR_CANNOTSENDTOCHAN:  /* <channel> :<reason> */

		if (!(chan = getarg(&p->params, " ")))
			fail(s->channel, "ERR_CANNOTSENDTOCHAN: channel is null");

		/* Channel buffer might not exist */
		if ((c = channel_list_get(&s->clist, chan)) == NULL)
			c = s->channel;

		if (p->trailing)
			newlinef(c, 0, "--", "Cannot send to '%s': %s", chan, p->trailing);
		else
			newlinef(c, 0, "--", "Cannot send to '%s'", chan);
		break;


	case ERR_ERRONEUSNICKNAME:  /* 432 <nick> :<reason> */

		if (!(nick = getarg(&p->params, " ")))
			fail(s->channel, "ERR_ERRONEUSNICKNAME: nick is null");

		newlinef(s->channel, 0, "-!!-", "'%s' - %s", nick, p->trailing);
		break;


	case ERR_NICKNAMEINUSE:  /* 433 <nick> :Nickname is already in use */

		if (!(nick = getarg(&p->params, " ")))
			fail(s->channel, "ERR_NICKNAMEINUSE: nick is null");

		newlinef(s->channel, 0, "-!!-", "Nick '%s' in use", nick);

		if (IS_ME(nick)) {

			server_nicks_next(s);

			newlinef(s->channel, 0, "-!!-", "Trying again with '%s'", s->nick);

			if ((ret = io_sendf(s->connection, "NICK %s", s->nick)))
				failf(s->channel, "sendf fail: %s", io_err(ret));

			return 0;
		}
		break;


	case ERR_INVITEONLYCHAN:
	case ERR_NOCHANMODES:

		if (p->trailing)
			newlinef(s->channel, 0, "--", "%s: %s", p->params, p->trailing);
		else
			newlinef(s->channel, 0, "--", "%s", p->params);
		break;


	default:

		newlinef(s->channel, 0, "UNHANDLED", "%d %s :%s", code, p->params, p->trailing);
		break;
	}

	return 0;
}
